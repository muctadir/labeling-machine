"""Initial migration.

Revision ID: bee073db4c51
Revises: 
Create Date: 2022-02-14 11:50:57.117637

"""
import os

import faker
import sqlalchemy as sa
from alembic import op
# revision identifiers, used by Alembic.
from werkzeug.security import generate_password_hash

from src import app
from src.database.models import User, Artifact

revision = 'bee073db4c51'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Artifact',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('created_by', sa.Text(), nullable=True),
                    sa.Column('text', sa.Text(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('Label',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('created_by', sa.Text(), nullable=True),
                    sa.Column('labeling', sa.Text(), nullable=False),
                    sa.Column('remark', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('labeling')
                    )
    op.create_table('User',
                    sa.Column('username', sa.Text(), nullable=False),
                    sa.Column('password', sa.String(length=100), nullable=False),
                    sa.Column('gender', sa.Text(), nullable=True),
                    sa.Column('education', sa.Text(), nullable=True),
                    sa.Column('occupation', sa.Text(), nullable=True),
                    sa.Column('affiliation', sa.Text(), nullable=True),
                    sa.Column('years_xp', sa.Integer(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.PrimaryKeyConstraint('username')
                    )
    op.create_table('ArtifactLabelRelation',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('created_by', sa.Text(), nullable=True),
                    sa.Column('artifact_id', sa.Integer(), nullable=True),
                    sa.Column('label_id', sa.Integer(), nullable=True),
                    sa.Column('remark', sa.Text(), nullable=True),
                    sa.Column('duration_sec', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['artifact_id'], ['Artifact.id'], ),
                    sa.ForeignKeyConstraint(['label_id'], ['Label.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('FlaggedArtifact',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('created_by', sa.Text(), nullable=True),
                    sa.Column('artifact_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['artifact_id'], ['Artifact.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('LockedArtifact',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('created_by', sa.Text(), nullable=True),
                    sa.Column('artifact_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['artifact_id'], ['Artifact.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('Note',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('created_by', sa.Text(), nullable=True),
                    sa.Column('note', sa.Text(), nullable=False),
                    sa.Column('artifact_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['artifact_id'], ['Artifact.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    # ### end Alembic commands ###

    # insert seed data
    initialize_database()


def initialize_database():
    init_users()
    import_dummy_data()


def init_users():
    print("Initializing default users. ", end='')
    env_pass_key = 'API_PASSWORD'
    password = os.environ.get(env_pass_key)

    if not (password or '').strip():
        raise ValueError(f'"{env_pass_key}" environment variable for default password is empty.')

    password = generate_password_hash(password, method='sha256')
    op.bulk_insert(User.__table__, [
        dict(username='hossain', password=password, gender='male', education='PhD', occupation='',
             affiliation='TU/e', years_xp=0),
        dict(username='david', password=password, gender='male', education='PhD', occupation='',
             affiliation='TU/e', years_xp=0),
        dict(username='raghav', password=password, gender='male', education='PhD', occupation='',
             affiliation='TiU', years_xp=0),
        dict(username='admin', password=password, gender='male', education='Masters', occupation='',
             affiliation='TU/e', years_xp=0)
    ])

    print("\t[SUCCESS]")


def import_dummy_data():
    if not app.env == 'production':
        print("Loading dummy artifacts ...", end='')
        fake = faker.Faker()
        op.bulk_insert(Artifact.__table__, [
            dict(text=fake.paragraph(15), created_by='admin') for _ in range(100)
        ])
        print("\t[SUCCESS]")
    else:
        print(f'No dummy data loaded. Application is running in {str.upper(app.env)} mode!!!')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Note')
    op.drop_table('LockedArtifact')
    op.drop_table('FlaggedArtifact')
    op.drop_table('ArtifactLabelRelation')
    op.drop_table('User')
    op.drop_table('Label')
    op.drop_table('Artifact')
    # ### end Alembic commands ###
